package com.example.epilepsytestapp.savefiles

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.util.Log
import android.widget.Toast
import androidx.camera.video.FileOutputOptions
import androidx.camera.video.Recorder
import androidx.camera.video.Recording
import androidx.camera.video.VideoCapture
import androidx.camera.video.VideoRecordEvent
import androidx.compose.runtime.MutableState
import androidx.core.content.ContextCompat
import java.io.File

fun startRecording(
    context: Context,
    videoCapture: VideoCapture<Recorder>,
    recordingState: MutableState<Recording?>,
    videoFilePathState: MutableState<String?>,
    recordedVideos: MutableList<String>
): Recording? {
    Log.d("TestScreen", "D√©marrage de l'enregistrement")

    // V√©rification des permissions
    val hasPermissions = ContextCompat.checkSelfPermission(context, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED &&
            ContextCompat.checkSelfPermission(context, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED

    if (!hasPermissions) {
        Log.e("TestScreen", "Permissions insuffisantes pour enregistrer")
        Toast.makeText(context, "Permissions non accord√©es", Toast.LENGTH_LONG).show()
        return null
    }

    // Pr√©paration du r√©pertoire de stockage
    val videosDirectory = File(context.getExternalFilesDir(null), "EpilepsyTests/Videos")
    if (!videosDirectory.exists()) {
        if (!videosDirectory.mkdirs()) {
            Log.e("TestScreen", "‚ùå Erreur lors de la cr√©ation du r√©pertoire des vid√©os.")
            Toast.makeText(context, "Erreur lors de la cr√©ation du r√©pertoire", Toast.LENGTH_SHORT).show()
            return null
        }
    }

    // Cr√©ation d'un fichier pour la vid√©o
    val outputFile = File(videosDirectory, "test_screen_record_${System.currentTimeMillis()}.mp4")

    // V√©rification imm√©diate de l'existence du fichier (au cas o√π la cr√©ation √©chouerait)
    if (!outputFile.exists()) {
        try {
            if (outputFile.createNewFile()) {
                Log.d("TestScreen", "Fichier vid√©o cr√©√© avec succ√®s : ${outputFile.absolutePath}")
            } else {
                Log.e("TestScreen", "‚ùå Impossible de cr√©er le fichier vid√©o.")
                Toast.makeText(context, "Erreur lors de la cr√©ation du fichier vid√©o", Toast.LENGTH_SHORT).show()
                return null
            }
        } catch (e: Exception) {
            Log.e("TestScreen", "Erreur lors de la cr√©ation du fichier vid√©o", e)
            Toast.makeText(context, "Erreur lors de la cr√©ation du fichier vid√©o", Toast.LENGTH_SHORT).show()
            return null
        }
    }

    val outputOptions = FileOutputOptions.Builder(outputFile).build()

    // Si un enregistrement est d√©j√† en cours, arr√™tez-le d'abord
    recordingState.value?.stop()

    // D√©marrage de l'enregistrement vid√©o
    return videoCapture.output.prepareRecording(context, outputOptions)
        .withAudioEnabled()
        .start(ContextCompat.getMainExecutor(context)) { recordEvent ->
            when (recordEvent) {
                is VideoRecordEvent.Start -> {
                    Log.d("TestScreen", "Enregistrement d√©marr√©")
                    Toast.makeText(context, "Enregistrement en cours", Toast.LENGTH_SHORT).show()
                }
                is VideoRecordEvent.Finalize -> {
                    Log.d("TestScreen", "Enregistrement termin√© : ${outputFile.absolutePath}")
                    // Ajouter le chemin du fichier vid√©o √† recordedVideos si ce n'est pas d√©j√† fait
                    if (!recordedVideos.contains(outputFile.absolutePath)) {
                        recordedVideos.add(outputFile.absolutePath)
                        Log.d("TestScreen", "üé¨ Vid√©o ajout√©e √† la liste : ${outputFile.absolutePath}")
                    }

                }
            }
        }.also {
            recordingState.value = it
            videoFilePathState.value = outputFile.absolutePath // Juste enregistrer le chemin ici
        }
}

fun stopRecording(
    context: Context,
    recordingState: MutableState<Recording?>,
    videoFilePathState: MutableState<String?>,
    recordedVideos: MutableList<String>
): String? {
    return try {
        // V√©rification de l'enregistrement actif
        recordingState.value?.stop()
        recordingState.value = null
        Log.d("TestScreen", "Enregistrement arr√™t√© avec succ√®s")
        Toast.makeText(context, "Enregistrement arr√™t√©", Toast.LENGTH_SHORT).show()

        // R√©cup√©ration du chemin du fichier vid√©o
        val videoFilePath = videoFilePathState.value

        // V√©rification si le fichier existe apr√®s l'arr√™t de l'enregistrement
        if (!videoFilePath.isNullOrEmpty()) {
            val videoFile = File(videoFilePath)

            // V√©rification imm√©diate de l'existence du fichier
            if (videoFile.exists()) {
                // Ajouter le chemin du fichier vid√©o √† recordedVideos si ce n'est pas d√©j√† fait
                if (!recordedVideos.contains(videoFilePath)) {
                    recordedVideos.add(videoFilePath)
                    Log.d("TestScreen", "üé¨ Vid√©o ajout√©e √† la liste : ${videoFilePath}")
                }
                return videoFilePath
            } else {
                Log.e("TestScreen", "‚ùå Le fichier vid√©o n'existe pas apr√®s l'enregistrement : $videoFilePath")
                Toast.makeText(context, "Erreur : Le fichier vid√©o n'existe pas", Toast.LENGTH_SHORT).show()
                return null
            }
        } else {
            Log.e("TestScreen", "‚ùå Chemin du fichier vid√©o non disponible")
            Toast.makeText(context, "Erreur : Chemin du fichier vid√©o non disponible", Toast.LENGTH_SHORT).show()
            return null
        }
    } catch (e: Exception) {
        Log.e("TestScreen", "Erreur lors de l'arr√™t de l'enregistrement", e)
        Toast.makeText(context, "Erreur lors de l'arr√™t de l'enregistrement", Toast.LENGTH_SHORT).show()
        return null
    }
}
