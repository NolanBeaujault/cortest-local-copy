package com.example.epilepsytestapp.savefiles

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.widget.Toast
import androidx.camera.video.FileOutputOptions
import androidx.camera.video.Recorder
import androidx.camera.video.Recording
import androidx.camera.video.VideoCapture
import androidx.camera.video.VideoRecordEvent
import androidx.compose.runtime.MutableState
import androidx.core.content.ContextCompat
import java.io.File

fun startRecording(
    context: Context,
    videoCapture: VideoCapture<Recorder>,
    recordingState: MutableState<Recording?>,
    videoFilePathState: MutableState<String?>,
    recordedVideos: MutableList<String>
): Recording? {
    Log.d("TestScreen", "D√©marrage de l'enregistrement")

    // V√©rifiez que les permissions sont bien accord√©es
    val hasPermissions = ContextCompat.checkSelfPermission(context, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED &&
            ContextCompat.checkSelfPermission(context, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED

    if (!hasPermissions) {
        Log.e("TestScreen", "Permissions insuffisantes pour enregistrer")
        Toast.makeText(context, "Permissions non accord√©es", Toast.LENGTH_LONG).show()
        return null
    }

    val videosDirectory = File(context.getExternalFilesDir(null), "EpilepsyTests/Videos")
    if (!videosDirectory.exists()) videosDirectory.mkdirs()

    val outputFile = File(videosDirectory, "test_screen_record_${System.currentTimeMillis()}.mp4")
    val videoFilePath = outputFile.absolutePath
    videoFilePathState.value = videoFilePath

    val outputOptions = FileOutputOptions.Builder(outputFile).build()

    // Si un enregistrement est d√©j√† en cours, arr√™tez-le proprement
    recordingState.value?.let {
        Log.d("TestScreen", "Un enregistrement est d√©j√† en cours. Arr√™t en cours...")
        stopRecording(context, recordingState, videoFilePathState)
    }

    // D√©marrer l'enregistrement
    return try {
        videoCapture.output
            .prepareRecording(context, outputOptions)
            .withAudioEnabled()
            .start(ContextCompat.getMainExecutor(context)) { recordEvent ->
                when (recordEvent) {
                    is VideoRecordEvent.Start -> {
                        Log.d("TestScreen", "Enregistrement d√©marr√©")
                        Toast.makeText(context, "Enregistrement en cours", Toast.LENGTH_SHORT).show()
                    }
                    is VideoRecordEvent.Finalize -> {
                        if (recordEvent.hasError()) {
                            Log.e("TestScreen", "‚ùå Erreur √† la finalisation de l'enregistrement : ${recordEvent.error}")
                            Toast.makeText(context, "Erreur lors de l'enregistrement", Toast.LENGTH_SHORT).show()
                        } else {
                            Log.d("TestScreen", "‚úÖ Enregistrement termin√© avec succ√®s : $videoFilePath")
                            recordedVideos.add(videoFilePath)  // ‚úÖ Ajout apr√®s succ√®s
                            Toast.makeText(context, "Vid√©o enregistr√©e", Toast.LENGTH_SHORT).show()
                        }
                    }
                }
            }.also {
                Log.d("TestScreen", "üé• D√©marrage de l'enregistrement effectu√©.")
                recordingState.value = it
            }
    } catch (e: Exception) {
        Log.e("TestScreen", "Erreur lors du d√©marrage de l'enregistrement", e)
        null
    }
}

fun stopRecording(
    context: Context,
    recordingState: MutableState<Recording?>,
    videoFilePathState: MutableState<String?>
): String? {
    return try {
        val recording = recordingState.value
        if (recording == null) {
            Log.w("TestScreen", "Aucun enregistrement en cours √† arr√™ter.")
            return null
        }

        // Ajoutez un d√©lai pour donner plus de temps √† l'enregistrement pour √™tre finalis√©
        recording.stop() // Arr√™t imm√©diat de l'enregistrement
        Log.d("TestScreen", "‚úÖ Enregistrement stopp√©. Finalisation en cours...")

        Handler(Looper.getMainLooper()).postDelayed({
            Log.d("TestScreen", "‚úÖ Finalisation de l'enregistrement termin√©e.")
        }, 1000) // Assurez une p√©riode de stabilisation avant de finaliser
        recordingState.value = null

        val videoFilePath = videoFilePathState.value
        Log.d("TestScreen", "‚úÖ Enregistrement finalis√© avec succ√®s : $videoFilePath")
        Toast.makeText(context, "Enregistrement arr√™t√©", Toast.LENGTH_SHORT).show()

        videoFilePath
    } catch (e: Exception) {
        Log.e("TestScreen", "‚ùå Erreur lors de l'arr√™t de l'enregistrement", e)
        Toast.makeText(context, "Erreur lors de l'arr√™t", Toast.LENGTH_SHORT).show()
        null
    }
}