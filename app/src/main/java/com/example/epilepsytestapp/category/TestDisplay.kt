package com.example.epilepsytestapp.category

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.epilepsytestapp.R
import com.example.epilepsytestapp.ui.ImageClickable

@Composable
fun TestDisplay(
    test: Test,
    isFrontCamera: Boolean,
    onImageClick: (String) -> Unit = {},
    key: Int // Param√®tre pour la cl√©
) {
    val context = LocalContext.current

    // Utilisation de `remember` et `mutableStateOf` pour stocker l'√©tat mutable
    var randomMot by remember { mutableStateOf("") }
    var selectedImage by remember { mutableStateOf<String?>(null) }

    // üé≤ S√©lection du mot al√©atoire ind√©pendamment
    // Observe `currentInstructionIndex` pour r√©initialiser et choisir un nouveau mot √† chaque nouvelle instruction
    LaunchedEffect(key1 = key) {  // key est currentInstructionIndex ici
        randomMot = ""  // R√©initialisation du mot al√©atoire au d√©but du test
        selectedImage = null  // R√©initialisation de l'image s√©lectionn√©e au d√©but du test

        // Si mot_set n'est pas vide, s√©lectionne un mot al√©atoire
        if (!test.mot_set.isNullOrEmpty()) {
            // Affiche la valeur de mot_set dans le log
            Log.d("TestDisplay", "üîç Valeur de mot_set: ${test.mot_set}")

            randomMot = test.mot_set.random()
            Log.d("TestDisplay", "üé≤ Mot al√©atoire s√©lectionn√©: $randomMot")
        } else {
            Log.w("TestDisplay", "‚ö†Ô∏è mot_set est vide, aucun mot al√©atoire s√©lectionn√©.")
        }
    }

    // üé≤ Gestion des images selon l'affichage
    LaunchedEffect(test.image, test.affichage) {
        if (!test.image.isNullOrEmpty()) {
            Log.d("TestDisplay", "üì∑ Images disponibles: ${test.image}")
            Log.d("TestDisplay", "üß© Cl√© affichage: ${test.affichage}")

            if (test.image.size == 1) {
                selectedImage = test.image.first()
                Log.d("TestDisplay", "üì∑ Une seule image -> s√©lectionn√©e directement: $selectedImage")
            } else {
                when (test.affichage) {
                    "hasard" -> {
                        selectedImage = test.image.random()
                        Log.d("TestDisplay", "üîÄ Mode hasard -> image choisie: $selectedImage")
                    }
                    "complet" -> {
                        Log.d("TestDisplay", "üß© Mode complet avec 4 images.")
                    }
                    else -> {
                        Log.w("TestDisplay", "‚ö†Ô∏è Mode affichage inconnu ou non support√©: '${test.affichage}'")
                    }
                }
            }
        } else {
            Log.w("TestDisplay", "‚ö†Ô∏è Aucune image fournie dans le test")
        }
    }

    fun getMipmapResId(name: String): Int {
        val imageNameWithForeground = "${name}_foreground"
        return try {
            val resId = R.mipmap::class.java.getField(imageNameWithForeground).getInt(null)
            Log.d("TestDisplay", "‚úÖ Image trouv√©e: R.mipmap.$imageNameWithForeground (resId=$resId)")
            resId
        } catch (e: Exception) {
            Log.e("TestDisplay", "‚ùå Erreur: image '$imageNameWithForeground' introuvable dans mipmap", e)
            0
        }
    }

    Box(
        modifier = Modifier.fillMaxSize()
    ) {
        // üñº Image unique ou al√©atoire
        selectedImage?.let { imageName ->
            val resId = getMipmapResId(imageName)
            if (resId != 0) {
                Image(
                    painter = painterResource(id = resId),
                    contentDescription = imageName,
                    modifier = Modifier
                        .size(200.dp)
                        .align(Alignment.Center)
                        .padding(top = 16.dp)
                )
            } else {
                Log.w("TestDisplay", "‚ö†Ô∏è Image non affich√©e: resId invalide pour '$imageName'")
            }
        }

        // üñº Grille de 4 images
        if (test.image?.size == 4 && test.affichage == "complet") {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 70.dp)
                    .align(Alignment.TopCenter),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                test.image.chunked(2).forEach { rowImages ->
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceEvenly
                    ) {
                        rowImages.forEach { img ->
                            val resId = getMipmapResId(img)
                            if (resId != 0) {
                                ImageClickable(
                                    imageResId = resId,
                                    contentDescription = img,
                                    onClick = { onImageClick(img) },
                                    modifier = Modifier
                                        .weight(1f)
                                        .aspectRatio(1f)
                                )
                            } else {
                                Log.w("TestDisplay", "‚ö†Ô∏è Image ignor√©e dans le grid: $img (resId invalide)")
                            }
                        }
                    }
                }
            }
        }

        // üìù Consigne
        val consigne = if (isFrontCamera) test.consigneA else test.consigneH
        Text(
            text = consigne,
            style = MaterialTheme.typography.headlineSmall.copy(fontSize = 30.sp),
            color = MaterialTheme.colorScheme.background,
            textAlign = TextAlign.Center,
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(bottom = 250.dp) // Remont√©e de la consigne
        )

        // üü° Mot al√©atoire affich√© en-dessous
        if (randomMot.isNotEmpty()) {
            Text(
                text = randomMot,
                style = MaterialTheme.typography.headlineSmall.copy(fontSize = 50.sp),
                color = MaterialTheme.colorScheme.background,
                textAlign = TextAlign.Center,
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .padding(bottom = 180.dp) // Ajustement de l'espace pour √©viter chevauchement
            )
        } else {
            Log.w("TestDisplay", "‚ö†Ô∏è Aucune valeur pour randomMot √† afficher.")
        }
    }
}
